

set(thirdparties_dir ${CMAKE_SOURCE_DIR}/thirdparties)



# external rules common to all platforms
#############################################
# cfitsio
if(NOT EXISTS ${thirdparties_dir}/cfitsio)
  # untar the dependency
  message(STATUS "Untarring cfitsio")
  execute_process(COMMAND ${CMAKE_COMMAND} -E tar xf ${thirdparties_dir}/cfitsio3370.tar
                    WORKING_DIRECTORY ${thirdparties_dir})
endif()

set(BUILD_SHARED_LIBS OFF)
set(USE_PTHREADS OFF)
add_subdirectory(${thirdparties_dir}/cfitsio)

if(WIN32)
  set(cfitsio_LIB_NAME cfitsio)
else()
  set(cfitsio_LIB_NAME libcfitsio)
endif()

include_directories(${thirdparties_dir}/cfitsio)
set(PHD_LINK_EXTERNAL ${PHD_LINK_EXTERNAL} ${cfitsio_LIB_NAME})


if(WIN32)
  target_compile_definitions(
    ${cfitsio_LIB_NAME}
    PRIVATE FF_NO_UNISTD_H)
endif()



#############################################
# libusb / win32 / apple
set(LIBUSB libusb-1.0.9)
if(NOT EXISTS ${thirdparties_dir}/${LIBUSB})
  # untar the dependency
  execute_process(
    COMMAND ${CMAKE_COMMAND} -E tar xjf ${thirdparties_dir}/${LIBUSB}.tar.bz2
    WORKING_DIRECTORY ${thirdparties_dir})
endif()  

set(libusb_root ${thirdparties_dir}/${LIBUSB})
set(libusb_dir ${libusb_root}/libusb)
include_directories(${libusb_dir})
set(libUSB_SRC
  ${libusb_dir}/core.c
  ${libusb_dir}/descriptor.c
  ${libusb_dir}/io.c
  ${libusb_dir}/sync.c
  ${libusb_dir}/libusb.h
  ${libusb_dir}/libusbi.h

  )
if(APPLE)
  set(libUSB_SRC ${libUSB_SRC}  
  
    # platform specific configuration file
    ${thirdparties_dir}/include/${LIBUSB}
  
    # platform specific implementation
    ${libusb_dir}/os/darwin_usb.h
    ${libusb_dir}/os/darwin_usb.c
    
    ${libusb_dir}/os/threads_posix.h 
    ${libusb_dir}/os/threads_posix.c
   )
   
  set(${LIBUSB}_additional_include_dir ${thirdparties_dir}/include/${LIBUSB})
elseif(WIN32)
  set(libUSB_SRC ${libUSB_SRC}  
  
    # platform specific configuration files
    ${libusb_root}/msvc/stdint.h
    ${libusb_root}/msvc/inttypes.h
    ${libusb_root}/msvc/config.h
  
    # platform specific implementation
    ${libusb_dir}/os/windows_usb.h
    ${libusb_dir}/os/windows_usb.c
    
    ${libusb_dir}/os/threads_windows.h
    ${libusb_dir}/os/threads_windows.c
    
    ${libusb_dir}/os/poll_windows.h
    ${libusb_dir}/os/poll_windows.c
   )
   
  set(${LIBUSB}_additional_include_dir ${libusb_root}/msvc/)
endif()
add_library(USB ${libUSB_SRC})

target_include_directories(USB PRIVATE ${${LIBUSB}_additional_include_dir})

if(NOT WIN32)
  target_compile_definitions(
    USB
    PRIVATE LIBUSB_DESCRIBE "")
endif()
set(PHD_LINK_EXTERNAL ${PHD_LINK_EXTERNAL} USB)






#############################################
#
# externals on Windows
#
#############################################
if(WIN32)

  # wxWidgets
  set(wxWidgets_CONFIGURATION msw)
  set(wxWidgets_ROOT_DIR "D:/Code/tmp_code/wxWidgets-3.0.1")
  set(wxWidgets_USE_STATIC ON)
  set(wxWidgets_USE_DEBUG ON)
  set(wxWidgets_USE_UNICODE ON)
  find_package(wxWidgets REQUIRED)
  include(${wxWidgets_USE_FILE})

  
  set(PHD_LINK_EXTERNAL ${PHD_LINK_EXTERNAL} ${wxWidgets_LIBRARIES})
  
  
  
  # openCV
  # openCV should be installed somewhere defined on the command line. If this is not the case, an error message is printed and 
  # the build is aborted.
  if(NOT OpenCVRoot)
    message(FATAL_ERROR "OpenCVRoot is not defined. OpenCVRoot should be defined with the option -DOpenCVRoot=<root-to-opencv>")
  endif()
  
  set(opencv_root ${OpenCVRoot})
  if(EXISTS ${opencv_root}/opencv)
    set(opencv_root ${opencv_root}/opencv)
  endif()
  
  if(NOT EXISTS ${opencv_root}/build)
    message(FATAL_ERROR "Cannot find the build directory of open cv. Please ensure you have decompressed the version for windows")
  endif()
  
  if(NOT EXISTS ${opencv_root}/build/include)
    message(FATAL_ERROR "Cannot find the header directory of open cv. Please ensure you have decompressed the version for windows")
  endif()
  
  if(NOT EXISTS ${opencv_root}/build/include)
    message(FATAL_ERROR "Cannot find the header directory of open cv. Please ensure you have decompressed the version for windows")
  endif()
  
  
  # apparently this is the way cmake works... did not know, the OpenCVConfig.cmake file is enough for the configuration
  set(OpenCV_DIR ${opencv_root}/build/)
  find_package(OpenCV REQUIRED)
  
  if(NOT OpenCV_INCLUDE_DIRS)
    message(FATAL_ERROR "Cannot add the OpenCV include directories")
  endif()
  
  include_directories(${OpenCV_INCLUDE_DIRS})
  set(PHD_LINK_EXTERNAL ${PHD_LINK_EXTERNAL} ${OpenCV_LIBS}) # Raffi: maybe reduce a bit the number of libraries to link against
  
  
  # VidCapture
  set(vidcap_dir ${PHD_PROJECT_ROOT_DIR}/cameras/VidCapture)
  include_directories(${vidcap_dir})
  message("include ${vidcap_dir}")
  
  
endif()


#############################################
#
# externals on Apple
#
#############################################
if(APPLE)
  find_library(quicktimeFramework QuickTime)
  find_library(iokitFramework     IOKit)
  find_library(carbonFramework    Carbon)
  find_library(cocoaFramework     Cocoa)
  find_library(systemFramework    System)
  find_library(webkitFramework    Webkit)
  find_library(audioToolboxFramework AudioToolbox)
  find_library(openGLFramework    OpenGL)
  set(PHD_LINK_EXTERNAL ${QuickTime} ${IOKit} ${Carbon} ${Cocoa} ${System} ${Webkit} ${AudioToolbox} ${OpenGL})
  
  find_path(CARBON_INCLUDE_DIR Carbon.h)
  message(STATUS "Carbon header found at ${CARBON_INCLUDE_DIR}")
  
  
  
  
  #############################################
  # Camera frameworks
  #
  find_library( sbigudFramework
                NAMES SBIGUDrv
                PATHS ${thirdparties_dir}/frameworks	)
  if(NOT sbigudFramework)
    message(FATAL_ERROR "Cannot find the SBIGUDrv drivers")
  endif()
  include_directories(${sbigudFramework})
  set(PHD_LINK_EXTERNAL ${PHD_LINK_EXTERNAL} ${sbigudFramework})

  ### 
  find_library( fcCamFramework
                NAMES fcCamFw
                PATHS ${thirdparties_dir}/frameworks	)
  if(NOT fcCamFramework)
    message(FATAL_ERROR "Cannot find the fcCamFw drivers")
  endif()
  include_directories(${fcCamFramework})
  set(PHD_LINK_EXTERNAL ${PHD_LINK_EXTERNAL} ${fcCamFramework})

  find_library( dsiMeadeLibrary
                NAMES DsiDevice
                PATHS ${PHD_PROJECT_ROOT_DIR}/cameras	)
  if(NOT dsiMeadeLibrary)
    message(FATAL_ERROR "Cannot find the dsiMeadeLibrary drivers")
  endif()
  #include_directories(${fcCamFramework})
  set(PHD_LINK_EXTERNAL ${PHD_LINK_EXTERNAL} ${dsiMeadeLibrary})

  find_library( sxMac
                NAMES SXMacLib
                PATHS ${PHD_PROJECT_ROOT_DIR}/cameras	)
  if(NOT sxMac)
    message(FATAL_ERROR "Cannot find the sxMac drivers")
  endif()
  set(PHD_LINK_EXTERNAL ${PHD_LINK_EXTERNAL} ${sxMac})

  find_library( asiCamera
                NAMES ASICamera
                PATHS ${PHD_PROJECT_ROOT_DIR}/cameras/zwolibs/x86	)
  if(NOT asiCamera)
    message(FATAL_ERROR "Cannot find the asiCamera drivers")
  endif()
  set(PHD_LINK_EXTERNAL ${PHD_LINK_EXTERNAL} ${asiCamera})


  
  
  
  
  
  
  
  #############################################
  # wxWidgets
  
  if(wxWidgets_PREFIX_DIRECTORY)
    set(wxWidgets_CONFIG_OPTIONS --prefix=${wxWidgets_PREFIX_DIRECTORY})
  
    find_program(wxWidgets_CONFIG_EXECUTABLE NAMES "wx-config" PATHS ${wxWidgets_PREFIX_DIRECTORY}/bin NO_DEFAULT_PATH)
    if(NOT wxWidgets_CONFIG_EXECUTABLE)
      message(FATAL_ERROR "Cannot find wxWidgets_CONFIG_EXECUTABLE from the given directory ${wxWidgets_PREFIX_DIRECTORY}")
    endif()  
  endif()
  
  find_package(wxWidgets REQUIRED)
  if(NOT wxWidgets_FOUND)
    message(FATAL_ERROR "WxWidget cannot be found. Please use wx-config prefix")
  endif()
  set(PHD_LINK_EXTERNAL ${PHD_LINK_EXTERNAL} ${wxWidgets_LIBRARIES} wx_osx_cocoau_aui-3.0)
  message("wxLibraries ${wxWidgets_LIBRARIES}")
  
  
  

  


  #############################################
  # libDC
  #
  set(LIBDC libdc1394-2.2.2)
  if(NOT EXISTS ${thirdparties_dir}/${LIBDC})
    # untar the dependency
    execute_process(
      COMMAND ${CMAKE_COMMAND} -E tar xzf ${thirdparties_dir}/${LIBDC}.tar.gz
      WORKING_DIRECTORY ${thirdparties_dir})
  endif()  
  

  set(libdc_include_dir ${thirdparties_dir}/${LIBDC})
  set(libdc_dir ${libdc_include_dir}/dc1394)
  include_directories(${libdc_dir})
  include_directories(${libdc_include_dir})
  
  set(libDC_SRC
    ${libdc_dir}/dc1394.h

    ${libdc_dir}/bayer.c
    ${libdc_dir}/camera.h

    ${libdc_dir}/capture.c
    ${libdc_dir}/capture.h

    ${libdc_dir}/control.c
    ${libdc_dir}/control.h
    
    ${libdc_dir}/conversions.c
    ${libdc_dir}/conversions.h
        
    ${libdc_dir}/enumeration.c
    
    ${libdc_dir}/format7.c
    ${libdc_dir}/format7.h
    
    ${libdc_dir}/internal.c
    ${libdc_dir}/internal.h
    
    ${libdc_dir}/iso.c
    ${libdc_dir}/iso.h
    
    ${libdc_dir}/log.c
    ${libdc_dir}/log.h
    
    ${libdc_dir}/offsets.h
    ${libdc_dir}/platform.h
    
    ${libdc_dir}/register.c
    ${libdc_dir}/register.h
    ${libdc_dir}/types.h
    
    ${libdc_dir}/utils.c
    ${libdc_dir}/utils.h
    
    ${libdc_dir}/video.h
    
    # USB backend
    ${libdc_dir}//usb/capture.c
    ${libdc_dir}//usb/control.c
    ${libdc_dir}//usb/usb.h

    # mac specific
    ${libdc_dir}/macosx.c
    ${libdc_dir}/macosx.h
    ${libdc_dir}/macosx/control.c
    ${libdc_dir}/macosx/capture.c
    ${libdc_dir}/macosx/macosx.h

  )
  
  add_library(dc ${libDC_SRC})
  target_include_directories(dc PRIVATE ${thirdparties_dir}/include/${LIBDC})
  target_compile_definitions(dc PRIVATE HAVE_LIBUSB HAVE_MACOSX)
  set(PHD_LINK_EXTERNAL ${PHD_LINK_EXTERNAL} dc)
  



  #############################################
  # HID Utils
  #
  #if(NOT EXISTS "${thirdparties_dir}/HID Utilities Source")
  #  # untar the dependency
  #  execute_process(COMMAND ${CMAKE_COMMAND} -E tar xzf "${thirdparties_dir}/HID Utilities Source.zip")
  #endif()  

  #set(libhid_include_dir "${thirdparties_dir}/HID Utilities Source/")
  set(libhid_include_dir "${thirdparties_dir}/HID_Utilities/")
  set(libhid_src_dir ${libhid_include_dir})
  include_directories(${libhid_include_dir})
  include_directories(${libhid_include_dir}/IOHIDManager)
  
  #set(libHID_SRC
  #  ${libhid_src_dir}/HID_CFM.c
  #  ${libhid_src_dir}/HID_Config_Utilities.c
  #  ${libhid_src_dir}/HID_Config_Utilities.h
  #  ${libhid_src_dir}/HID_Error_Handler.c
  #  ${libhid_src_dir}/HID_Error_Handler.h
  #  ${libhid_src_dir}/HID_Name_Lookup.c
  #  ${libhid_src_dir}/HID_Name_Lookup.h
  #  ${libhid_src_dir}/HID_Queue_Utilities.c
  #  ${libhid_src_dir}/HID_Queue_Utilities.h
  #  ${libhid_src_dir}/HID_Transaction_Utilities.c
  #  ${libhid_src_dir}/HID_Transaction_Utilities.h
  #  ${libhid_src_dir}/HID_Utilities_CFM.h
  #  ${libhid_src_dir}/HID_Utilities_External.h
  #  ${libhid_src_dir}/HID_Utilities_Internal.h
  #  ${libhid_src_dir}/HID_Utilities.c
  #  ${libhid_src_dir}/HID_Utilities.h
  #  ${libhid_src_dir}/HID.bundle
  #  ${libhid_src_dir}/HIDLib.h
  #  ${libhid_src_dir}/IOHIDPowerUsage.h
  #  ${libhid_src_dir}/PID.h
  #)
  
  set(libHID_SRC
    ${libhid_src_dir}/HID_Config_Utilities.c
    ${libhid_src_dir}/HID_Error_Handler.c
    ${libhid_src_dir}/HID_Name_Lookup.c
    ${libhid_src_dir}/HID_Queue_Utilities.c
    ${libhid_src_dir}/HID_Utilities_External.h
    ${libhid_src_dir}/HID_Utilities.c
    
    
    ${libhid_src_dir}/IOHIDManager/ImmrHIDUtilAddOn.c
    ${libhid_src_dir}/IOHIDManager/ImmrHIDUtilAddOn.h
    ${libhid_src_dir}/IOHIDManager/IOHIDDevice_.c
    ${libhid_src_dir}/IOHIDManager/IOHIDDevice_.h
    ${libhid_src_dir}/IOHIDManager/IOHIDElement_.c
    ${libhid_src_dir}/IOHIDManager/IOHIDElement_.h
    ${libhid_src_dir}/IOHIDManager/IOHIDLib_.h
  )  
  
  add_library(hid ${libHID_SRC})
  #target_include_directories(hid PRIVATE ${libhid_src_dir}/IOHIDManager)
  set(PHD_LINK_EXTERNAL ${PHD_LINK_EXTERNAL} hid)
  
  
  
  ### does not work on x64
  #find_library( openssag
  #              NAMES openssag
  #              PATHS ${PHD_PROJECT_ROOT_DIR}/cameras	)
  #if(NOT openssag)
  #  message(FATAL_ERROR "Cannot find the openssag drivers")
  #endif()
  #set(PHD_LINK_EXTERNAL ${PHD_LINK_EXTERNAL} ${openssag})

  set(LIBOPENSSAG openssag)
  set(libopenssag_dir ${thirdparties_dir}/${LIBOPENSSAG}/src)
  include_directories(${libopenssag_dir})
  set(libOPENSSAG_SRC
    ${libopenssag_dir}/firmware.h
    ${libopenssag_dir}/loader.cpp
    ${libopenssag_dir}/openssag_priv.h
    ${libopenssag_dir}/openssag.cpp
    ${libopenssag_dir}/openssag.h
    )
  add_library(OpenSSAG ${libOPENSSAG_SRC})
  target_link_libraries(OpenSSAG USB)
  target_include_directories(OpenSSAG PRIVATE ${thirdparties_dir}/${LIBOPENSSAG}/src)
  set(PHD_LINK_EXTERNAL ${PHD_LINK_EXTERNAL} OpenSSAG)
    
  
  
  
endif()  # APPLE


