


# compilation of libUSB
if(APPLE)
  find_library(quicktimeFramework QuickTime)
  find_library(iokitFramework     IOKit)
  find_library(carbonFramework    Carbon)
  find_library(cocoaFramework     Cocoa)
  find_library(systemFramework    System)
  find_library(webkitFramework    Webkit)
  find_library(audioToolboxFramework AudioToolbox)
  find_library(openGLFramework    OpenGL)

  set(PHD_LINK_EXTERNAL ${QuickTime} ${IOKit} ${Carbon} ${Cocoa} ${System} ${Webkit} ${AudioToolbox} ${OpenGL})

  find_program(wxWidgets_CONFIG_EXECUTABLE NAMES "wx-config" PATHS /Users/raffi/Code/EI/usr/local/bin NO_DEFAULT_PATH)
  if(NOT wxWidgets_CONFIG_EXECUTABLE)
    message(FATAL_ERROR "Cannot find wxWidgets_CONFIG_EXECUTABLE: ${wxWidgets_CONFIG_EXECUTABLE}")
  endif()
  
  find_path(CARBON_INCLUDE_DIR Carbon.h)
  message(STATUS "Carbon header found at ${CARBON_INCLUDE_DIR}")
  
  
  
  
  #############################################
  # wxWidgets
  #set(wxWidgets_CONFIG_OPTIONS --prefix=/Users/raffi/Code/EI/usr/local)
  
  find_package(wxWidgets)
  if(NOT wxWidgets_FOUND)
    message(FATAL_ERROR "WxWidget cannot be found. Please use wx-config prefix")
  endif()
  set(PHD_LINK_EXTERNAL ${PHD_LINK_EXTERNAL} ${wxWidgets_LIBRARIES})
  
  
  
  #############################################
  # cfitsio
  if(NOT EXISTS ${CMAKE_SOURCE_DIR}/thirdparties/cfitsio)
    # untar the dependency
    execute_process(${CMAKE_COMMAND} -E tar xzf ${CMAKE_SOURCE_DIR}/thirdparties/cfitsio3370.tar)
  endif()
  
  set(BUILD_SHARED_LIBS OFF)
  set(USE_PTHREADS OFF)
  add_subdirectory(${CMAKE_SOURCE_DIR}/thirdparties/cfitsio)
  
  if(WIN32)
    set(cfitsio_LIB_NAME cfitsio)
  else()
    set(cfitsio_LIB_NAME libcfitsio)
  endif()
  
  include_directories(${CMAKE_SOURCE_DIR}/thirdparties/cfitsio)
  set(PHD_LINK_EXTERNAL ${PHD_LINK_EXTERNAL} ${cfitsio_LIB_NAME})
  
  
  #############################################
  # libusb & libusbcompat
  if(NOT EXISTS ${CMAKE_SOURCE_DIR}/thirdparties/libusb-1.0.9)
    # untar the dependency
    execute_process(${CMAKE_COMMAND} -E tar xjf ${CMAKE_SOURCE_DIR}/thirdparties/libusb-1.0.9.tar.bz2)
  endif()  
  

  set(libusb_dir ${CMAKE_SOURCE_DIR}/thirdparties/libusb-1.0.9/libusb)
  include_directories(${libusb_dir})
  set(libUSB_SRC
    ${libusb_dir}/core.c
    ${libusb_dir}/descriptor.c
    ${libusb_dir}/io.c
    ${libusb_dir}/sync.c
    ${libusb_dir}/libusb.h
    ${libusb_dir}/libusbi.h
    
    ${libusb_dir}/os/darwin_usb.c
    ${libusb_dir}/os/darwin_usb.h
    
    ${libusb_dir}/os/threads_posix.h 
    ${libusb_dir}/os/threads_posix.c
    )
  add_library(libUSB ${libUSB_SRC})
  set(PHD_LINK_EXTERNAL ${PHD_LINK_EXTERNAL} ${libUSB})
    
    
  if(NOT EXISTS ${CMAKE_SOURCE_DIR}/thirdparties/libusb-compat-0.1.4)
    # untar the dependency
    execute_process(${CMAKE_COMMAND} -E tar xjf ${CMAKE_SOURCE_DIR}/thirdparties/libusb-compat-0.1.4.tar.bz2)
  endif()  
    
  set(libusbcompath_dir ${CMAKE_SOURCE_DIR}/thirdparties/libusb-compat-0.1.4/libusb)
  include_directories(${libusbcompath_dir})
  set(libUSBCompat_SRC
    ${libusb_dir}/core.c
    ${libusb_dir}/libusb.h
    ${libusb_dir}/libusbi.h
  )
  add_library(libUSBCompat ${libUSBCompat_SRC})  
  set(PHD_LINK_EXTERNAL ${PHD_LINK_EXTERNAL} ${libUSBCompat})



  #############################################
  # Camera frameworks
  #
  find_library(SBIGUDrvFramework
    SBIGUDrv
    PATHS ${CMAKE_SOURCE_DIR}/thirdparties/frameworks)
    #CMAKE_FIND_FRAMEWORK "ONLY")
  set(PHD_LINK_EXTERNAL ${PHD_LINK_EXTERNAL} ${SBIGUDrvFramework})
  include_directories(${SBIGUDrvFramework})


  #############################################
  # libDC
  #
  if(NOT EXISTS ${CMAKE_SOURCE_DIR}/thirdparties/libdc1394-2.2.2)
    # untar the dependency
    execute_process(${CMAKE_COMMAND} -E tar xzf ${CMAKE_SOURCE_DIR}/thirdparties/libdc1394-2.2.2.tar.gz)
  endif()  
  

  set(libdc_include_dir ${CMAKE_SOURCE_DIR}/thirdparties/libdc1394-2.2.2)
  set(libdc_dir ${libdc_include_dir}/dc1394)
  include_directories(${libdc_dir})
  include_directories(${libdc_include_dir})
  
  set(libDC_SRC
    ${libdc_dir}/dc1394.h

    ${libdc_dir}/bayer.c
    ${libdc_dir}/camera.h

    ${libdc_dir}/capture.c
    ${libdc_dir}/capture.h

    ${libdc_dir}/control.c
    ${libdc_dir}/control.h
    
    ${libdc_dir}/conversions.c
    ${libdc_dir}/conversions.h
        
    ${libdc_dir}/enumeration.c
    
    ${libdc_dir}/format7.c
    ${libdc_dir}/format7.h
    
    ${libdc_dir}/internal.c
    ${libdc_dir}/internal.h
    
    ${libdc_dir}/iso.c
    ${libdc_dir}/iso.h
    
    ${libdc_dir}/log.c
    ${libdc_dir}/log.h
    
    ${libdc_dir}/macosx.c
    ${libdc_dir}/macosx.h

    ${libdc_dir}/offsets.h
    ${libdc_dir}/platform.h
    
    ${libdc_dir}/register.c
    ${libdc_dir}/register.h
    ${libdc_dir}/types.h
    
    ${libdc_dir}/utils.c
    ${libdc_dir}/utils.h
    
    ${libdc_dir}/video.h
  )
  
  add_library(dc ${libDC_SRC})
  set(PHD_LINK_EXTERNAL ${PHD_LINK_EXTERNAL} ${dc})
  
endif()


